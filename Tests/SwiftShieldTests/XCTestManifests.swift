#if !canImport(ObjectiveC)
import XCTest

extension ConversionMapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConversionMapTests = [
        ("test_dictInit", test_dictInit),
        ("test_failedStringInit", test_failedStringInit),
        ("test_outputPath", test_outputPath),
        ("test_stringInit", test_stringInit),
    ]
}

extension DeobfuscatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeobfuscatorTests = [
        ("test_deobfuscation", test_deobfuscation),
    ]
}

extension FeatureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FeatureTests = [
        ("test_CodingKeys_isIgnored", test_CodingKeys_isIgnored),
        ("test_ignorePublic_ignoresPublics", test_ignorePublic_ignoresPublics),
        ("test_internalFrameworkDelegateReferences_areIgnored", test_internalFrameworkDelegateReferences_areIgnored),
        ("test_operators_areIgnored", test_operators_areIgnored),
    ]
}

extension FileTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FileTests = [
        ("test_name", test_name),
        ("test_read_readsFile", test_read_readsFile),
        ("test_write_writesContentsToFile", test_write_writesContentsToFile),
    ]
}

extension ProjectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ProjectTests = [
        ("test_pbxproj", test_pbxproj),
        ("test_projectTagging", test_projectTagging),
        ("test_workspace", test_workspace),
    ]
}

extension SchemeInfoProviderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SchemeInfoProviderTests = [
        ("test_baseExtraction_ignoringModule", test_baseExtraction_ignoringModule),
        ("test_baseExtraction", test_baseExtraction),
        ("test_gettingModules_runsXcodebuildTask", test_gettingModules_runsXcodebuildTask),
        ("test_gettingModules_withProject_runsXcodebuildTask_withProjectParam", test_gettingModules_withProject_runsXcodebuildTask_withProjectParam),
        ("test_onInvalidOutput_nothingIsReturned", test_onInvalidOutput_nothingIsReturned),
        ("test_onNilOutput_errorIsThrown", test_onNilOutput_errorIsThrown),
        ("test_onNonZeroStatusCode_errorIsThrown", test_onNonZeroStatusCode_errorIsThrown),
        ("test_singleProject_tagging", test_singleProject_tagging),
        ("test_workspace_tagging", test_workspace_tagging),
    ]
}

extension SourceKitObfuscatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SourceKitObfuscatorTests = [
        ("test_fileContentsObfuscationBasedOnReferences_ignoresDuplicates", test_fileContentsObfuscationBasedOnReferences_ignoresDuplicates),
        ("test_fileContentsObfuscationBasedOnReferences", test_fileContentsObfuscationBasedOnReferences),
        ("test_moduleRegistration", test_moduleRegistration),
        ("test_obfuscation_cachesStrings", test_obfuscation_cachesStrings),
        ("test_obfuscation_haltsIfDelegateFails", test_obfuscation_haltsIfDelegateFails),
        ("test_obfuscation_returnsConversionMap", test_obfuscation_returnsConversionMap),
        ("test_obfuscation_sendsCorrectObfuscatedFileContentToDelegate", test_obfuscation_sendsCorrectObfuscatedFileContentToDelegate),
        ("test_obfuscation_sendsCorrectObfuscatedPlistContentToDelegate", test_obfuscation_sendsCorrectObfuscatedPlistContentToDelegate),
        ("test_removeParametersFromString", test_removeParametersFromString),
    ]
}

extension SwiftShieldControllerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftShieldControllerTests = [
        ("test_delegate_doesntWriteInDryRun", test_delegate_doesntWriteInDryRun),
        ("test_delegate_failsIfWritingFileFails", test_delegate_failsIfWritingFileFails),
        ("test_delegate_writes", test_delegate_writes),
        ("test_isInteractorDelegate", test_isInteractorDelegate),
        ("test_run", test_run),
    ]
}

extension SwiftShieldInteractorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftShieldInteractorTests = [
        ("test_gettingModules_callsProvider", test_gettingModules_callsProvider),
        ("test_interactorHalts_ifTaggingDelegateThrows", test_interactorHalts_ifTaggingDelegateThrows),
        ("test_mapPreparation_isSentToDelegate", test_mapPreparation_isSentToDelegate),
        ("test_mapPreparation_throwsOnDelegateThrow", test_mapPreparation_throwsOnDelegateThrow),
        ("test_obfuscatingModules_registersTargetsThenObfuscates", test_obfuscatingModules_registersTargetsThenObfuscates),
        ("test_obfuscatorDelegate_isRoutedToDelegate", test_obfuscatorDelegate_isRoutedToDelegate),
        ("test_tagging_callsProvider_andSendsToDelegate", test_tagging_callsProvider_andSendsToDelegate),
    ]
}

extension TaskRunnerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TaskRunnerTests = [
        ("test_failedCommand", test_failedCommand),
        ("test_successfulEcho", test_successfulEcho),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ConversionMapTests.__allTests__ConversionMapTests),
        testCase(DeobfuscatorTests.__allTests__DeobfuscatorTests),
        testCase(FeatureTests.__allTests__FeatureTests),
        testCase(FileTests.__allTests__FileTests),
        testCase(ProjectTests.__allTests__ProjectTests),
        testCase(SchemeInfoProviderTests.__allTests__SchemeInfoProviderTests),
        testCase(SourceKitObfuscatorTests.__allTests__SourceKitObfuscatorTests),
        testCase(SwiftShieldControllerTests.__allTests__SwiftShieldControllerTests),
        testCase(SwiftShieldInteractorTests.__allTests__SwiftShieldInteractorTests),
        testCase(TaskRunnerTests.__allTests__TaskRunnerTests),
    ]
}
#endif
